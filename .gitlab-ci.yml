image: docker:latest
services:
  - docker:dind


stages:
  - build
  - test
  - package
  - deploy


variables:
    DOCKER_DRIVER: overlay2
    IMAGE_NAME: 431611288834.dkr.ecr.us-east-1.amazonaws.com/continuous_delivery
    IMAGE_TAG: ${CI_COMMIT_REF_NAME}-${CI_PIPELINE_ID}
    AWS_REGION: us-east-1



# Build

build-jar:
  stage: build
  image: openjdk:8-jdk
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
  script: "./gradlew assemble"
  artifacts:
    paths:
      - backend/build/libs/*.jar
    expire_in: 2 week
  cache:
    paths:
      - .gradle/wrapper
      - .gradle/caches
      - build/nodejs



# Test

test-unit:
  stage: test
  image: openjdk:8-jdk
  variables:
    POSTGRES_HOST: "localhost:5432"
    POSTGRES_DB: "delivery"
    POSTGRES_USER: "postgres"
    POSTGRES_PASSWORD: "postgresPassword"
    RABBITMQ_HOST: "localhost"
    RABBITMQ_DEFAULT_USER: "admin"
    RABBITMQ_DEFAULT_PASS: "admin"
    RABBITMQ_DEFAULT_VHOST: "/"
  services:
    - name: postgres
      alias: $POSTGRES_HOST
    - name: rabbitmq
      alias: $RABBITMQ_HOST
  script:
    - ./gradlew check
  artifacts:
      when: always
      paths:
        - backend/build/reports/tests/test/
      expire_in: 2 week




# Package

.registry-auth-script: &registry_auth
  - |
    docker run --rm \
               -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
               -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
               aws ecr get-login --no-include-email --region ${AWS_REGION} | sh

package-docker:
  stage: package
  before_script: *registry_auth
  script:
    - docker build -t ${IMAGE_NAME}:${IMAGE_TAG} -f docker/Dockerfile .
    - docker push ${IMAGE_NAME}:${IMAGE_TAG}
  only:
    - mvp
    - sprint
    - staging
    - master






# Deploy

.prepare-key-script: &prepare_key
  - apk add --no-cache openssh-client
  - eval $(ssh-agent -s)
  - echo "$DEPLOY_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan $DEPLOY_HOST >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts


deploy-production:
  stage: deploy
  variables:
    DEPLOY_KEY: $DEPLOY_PRODUCTION_KEY
    DEPLOY_USER: ubuntu
    DEPLOY_HOST: 192.168.0.1
    CONTAINER_NAME: delivery
    CONTAINER_EXT_PORT: 8899
    POSTGRES_HOST: localhost:5432
    POSTGRES_DB: delivery
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: $PRODUCTION_POSTGRES_PASSWORD
    RABBITMQ_HOST: localhost
    RABBITMQ_DEFAULT_USER: admin
    RABBITMQ_DEFAULT_PASS: $PRODUCTION_RABBITMQ_PASSWORD
    RABBITMQ_DEFAULT_VHOST: /
    APPLICATION_DOMAIN: https://delivery.com
  before_script: *prepare_key
  script: *deploy_to_host